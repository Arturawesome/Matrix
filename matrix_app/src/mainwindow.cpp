// mainwindow.cpp
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "matrix.h"
#include "parser.h"
#include <QDebug>

MainWindow::MainWindow(QWidget *parent)
            :QMainWindow(parent), ui(new Ui::MainWindow), matrix_amount(0), current_matrix_index(0)
{
    /*
        new Ui::MainWindow: dynamicaly creates the object of Ui::MainWindow,
        which was generated by mainwindow.ui in Qt Creator.
        this object contans interface and all their elements
     */
    ui->setupUi(this);

    // tourn the signal on for changing value of QSpinBox
    connect(ui->spinBoxMatrixCount, SIGNAL(valueChanged(int)), this, SLOT(onMatrixCountChanged(int)) );

    connect(ui->pushButtonSave, &QPushButton::clicked, this, &MainWindow::onNextButtonClicked);

    connect(ui->pushButtonSaveMatrixData, &QPushButton::clicked, this, &MainWindow::onWriteButtonClickedSave);

    connect(ui->pushButtonCalculate, &QPushButton::clicked, this, &MainWindow::onCalculateButtonClicked );

    updatePromt();
    ui->lineEditRow->setEnabled(false);
    ui->lineEditColumn->setEnabled(false);
    ui->pushButtonSave->setEnabled(false);


}

MainWindow::~MainWindow(){
    delete ui;
}
void MainWindow::onMatrixCountChanged(int count){
    matrix_amount = count;
    qDebug() << "Num of Matrix changet to:  "<<count<<"\n";

    if(matrix_amount > 0){
        ui->lineEditRow->setEnabled(true);
        ui->lineEditColumn->setEnabled(true);
        ui->pushButtonSave->setEnabled(true);
        ui->pushButtonSaveMatrixData->setEnabled(false);
        //current_matrix_index++;
        updatePromt();
    }else{
        ui->lineEditRow->setEnabled(false);
        ui->lineEditColumn->setEnabled(false);
        ui->pushButtonSave->setEnabled(false);
    }
}


void MainWindow::onCalculateButtonClicked(){
    QString expression = ui->plainTextEditExpression->toPlainText();
    //qDebug()<<expression;

    try{
        std::vector<QString> polish_not = process_the_expression(expression);
        for(QString el:polish_not){
            qDebug()<<el;
        }

    } catch (const std::invalid_argument& e) {
        //QMessageBox::warning(this, "Error", QString("Invalid expression: %1").arg(e.what()));
        ui->labelExpressionResult->setText("Error in expression!");
    }

    return;
}


void MainWindow::onWriteButtonClickedSave(){
    int id_matrix = matrix_amount - current_matrix_index;
    qDebug()<<"id_matrix = "<<id_matrix<<"\n";
    qDebug()<<"current_matrix_index = "<<current_matrix_index<<"\n";

    QString matrixData = ui->plainTextEditMatrixData->toPlainText();
    list_of_matrix[id_matrix].WriteMatrix(matrixData);
    list_of_matrix[id_matrix].ShowMatrix();

    cleanWriteMatrixWindow();
    current_matrix_index--;

    if(current_matrix_index <= 0){
        ui->pushButtonSaveMatrixData->setEnabled(false);
        ui->plainTextEditMatrixData->setEnabled(false);
    } else {
        updateDataWindow(id_matrix+2, list_of_matrix[id_matrix+1]);
    }

}

void MainWindow::onNextButtonClicked(){
    bool row_ok, col_ok;
    int row, col;

    row = ui->lineEditRow->text().toInt();
    col = ui->lineEditColumn->text().toInt();
    Matrix<double> data(row, col);
    list_of_matrix.push_back(data);
    current_matrix_index++;

    if(current_matrix_index >= matrix_amount){
        qDebug()<<"All Matrixs are created\n";
        ui->labeRowColInput ->setText("All matrixes are created");
        ui->lineEditRow->setEnabled(false);
        ui->lineEditColumn->setEnabled(false);
        ui->pushButtonSave->setEnabled(false);

        ui->pushButtonSaveMatrixData->setEnabled(true);
        ui->plainTextEditMatrixData->setEnabled(true);
        updateDataWindow((matrix_amount - current_matrix_index) + 1, list_of_matrix[(matrix_amount - current_matrix_index)]);


    }else{
        updatePromt();
        cleanInputRowCol();
    }
}

void MainWindow::updateDataWindow(int count, Matrix<double>& data){
    qDebug()<<"updateDataWindow\n";
    QString info = QString("Write Matrix %1: row = %2, col = %3").arg(count).arg(data.GetRow()).arg(data.GetCol());
    ui->labeWriteMatrix ->setText(info);
}
void MainWindow::updatePromt(){
    // Qstring - field of qt6.
    // Arg - function for changeing infro after % in Qstring
    QString promt = QString("Write the number of rows and columns in Matrix %1").arg(current_matrix_index+1);
    // I set name in Qt creator for Qlabel labeRowColInput -> ui->labeRowColInput for changeing
    ui->labeRowColInput ->setText(promt);
}
void MainWindow::cleanWriteMatrixWindow(){
    ui->plainTextEditMatrixData ->clear();
}

void MainWindow::cleanInputRowCol(){
    //clean the text fileds
    ui->lineEditRow->clear();
    ui->lineEditColumn->clear();
}
















